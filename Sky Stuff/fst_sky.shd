//=============================================================================
//
// fst_sky.shd
//
// Author: Merricksdad, after Bhaal
// Date: 23/06/2022
// Original shader code https://www.shadertoy.com/view/4tdSWr
// 
//=============================================================================

#define SHADER_TYPE 2

#define LIGHTING 0
#define FOG 1
#define KEYHOLING 0

#define NORMAL_MAP 0
#define SPECULAR_MAP 0
#define ROUGHNESS_MAP 0
#define HEIGHT_MAP 0
#define SELF_ILLUMINATION_MAP 0
#define ENVIRONMENT_MAP 0
#define POSITION_WORLD 1

//setup MTR switches
uniform int USE_SUN_ORBIT_FLEX;
uniform int USE_HORIZON_MODS;
uniform int USE_TWO_LAYER_CLOUDS;
uniform int RENDER_CLOUDS;
uniform int RENDER_STARS;
uniform int RENDER_MOON_PHASES;
uniform int RENDER_SUN_LATE;
uniform int RENDER_MOON_LATE;


//setup sun and moon related uniforms from MTR
uniform float SunRadiusHorizonMulti;
uniform float SunIntensity;
uniform float SunRadius;

uniform float MoonRadiusHorizonMulti;
uniform float MoonRadius;

uniform int SkyLowestRender;

uniform float StarDensity;
uniform float StarMaxSize;

uniform float CloudScale; //0.05
uniform float CloudSpeed; //0.02
uniform float CloudBaseLum; //0.5
uniform float CloudLightenRate; //0.3
uniform float CloudCover; //0.2
uniform float CloudAlpha; //8.0
uniform float CloudSkyTint; //0.5
uniform float CloudPasses; //passed as a float to make it easier with nwscript

uniform int WeatherTypeOverride;
uniform float WeatherDensityOverride;

//other presets
/* Hazy Sky
uniform float CloudScale; //0.05
uniform float CloudSpeed; //0.02
uniform float CloudBaseLum; //0.5
uniform float CloudLightenRate; //0.3
uniform float CloudCover; //0.2
uniform float CloudAlpha; //0.07
uniform float CloudSkyTint; //0.5
*/


#include "inc_standard_md"
#include "inc_random"
//include "inc_boolean"
//include "inc_uniforms"

//setup additional uniforms not exposed within inc_standard
uniform lowp vec4 globalColor;

/*
uniform int worldtimerTimeOfDay;
uniform int moduleHour;
uniform int moduleDay;
uniform int moduleDawnHour;
uniform int moduleDuskHour;
uniform int moduleMinutesPerHour;

uniform int moduleMonth;
uniform int moduleYear;

uniform int areaWeatherType;
uniform float areaWeatherDensity;
*/
uniform float moduleTimeIntoTransition;
uniform float moduleTransitionTime;

//sky color palette
uniform int texture6Bound;
uniform sampler2D texUnit6;

//begin local variables
float tick = worldtimerTimeOfDay/1000.0;
vec3 vPosSky;

float fTicksPerDay = 1440000.0;
float moduleTime;
float timeToHemisphere;

vec3 vSunColor;
vec4 vSunFragColor;
vec3 vPosSun;
float fSunFragAngle;
float fSunLum;
float fSunGlow;
float fSunCloudGlow;
float fSunHorizonMod = 0.0;
float fSunSizeMod = 1.0;

vec3 vMoonColor;
vec4 vMoonFragColor;
vec3 vPosMoon;
float fMoonFragAngle;
float fMoonLum;
float fMoonGlow;
float fMoonHorizonMod = 0.0;
float fMoonSizeMod = 1.0;
float fMoonPhase;

vec3 vSkyColor;
float fSkyLum;

float fStarLum;

vec3 vCloudColor;
float fCloudLum;

float fTotalGlow = 0.0;

float fCloudWeatherAlpha = 1.0;
float fCloudWeatherCover = 1.0;
float fCloudWeatherLum = 1.0;
float fCloudWeatherTint = 1.0;
float fSkyWeatherColor = 1.0;
float fGlowWeatherPinch = 1.0;

// begin consts and additional functions
const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );

vec2 hash( vec2 p ) {
    p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
    return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;
    vec2 i = floor(p + (p.x+p.y)*K1);   
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
    vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot(n, vec3(70.0));  
}

float fbm(vec2 n) {
    float total = 0.0, amplitude = 0.1;
    for (int i = 0; i < 7; i++) {
        total += noise(n) * amplitude;
        n = m * n;
        amplitude *= 0.4;
    }
    return total;
}


float rand2D(vec2 n){ 
    return fract(sin(dot(n,vec2(12.9898,4.1414))) * 43758.5453);
}

float dotField(vec2 vIn, float fMaxDotSize, float fDensity){
	//get the integer and fractional portions of coordinates
    float fIntX = vIn.x - fract(vIn.x);
    float fFractX = vIn.x - fIntX;
    float fIntY = vIn.y - fract(vIn.y);
    float fFractY = vIn.y - fIntY;

	//check if a random number based on this location would produce a value
	//above our density number. If so, exit early.
    if ( rand2D(vec2(fIntX+1.0, fIntY+1.0)) > fDensity ) return 0.0;

	//produce a dot size based on this position
    float fOffsetX = rand2D(vec2(fIntX, fIntY)) - 0.5;
    float fOffsetY = rand2D(vec2(fIntX+1.0, fIntY)) - 0.5;
    float fDotSize = 0.5 * fMaxDotSize * max(0.25, rand2D(vec2(fIntX, fIntY+1.0)));

    vec2 vTruePos = vec2 (0.5 + fOffsetX * (1.0 - 2.0 * fDotSize) , 0.5 + fOffsetY * (1.0 - 2.0 * fDotSize));

    float fDist = length(vTruePos - vec2(fFractX, fFractY));

    return 1.0 - smoothstep(0.3 * fDotSize, 1.0 * fDotSize, fDist);
}

vec2 rotateUV(vec2 uv, vec2 pivot, float rotation) {
    float a = radians(rotation);
    float sine = sin(a);
    float cosine = cos(a);

    uv -= pivot;
    uv.x = uv.x * cosine - uv.y * sine;
    uv.y = uv.x * sine + uv.y * cosine;
    uv += pivot;

    return uv;
}

vec3 rotateX(vec3 vPoint, float theta){
	return vec3(vPoint.x, vPoint.y*cos(theta) - vPoint.z*sin(theta), vPoint.y*sin(theta) + vPoint.z*cos(theta));
}

vec3 rotateY(vec3 vPoint, float theta){
	return vec3(vPoint.x*cos(theta) - vPoint.z*sin(theta), vPoint.y, vPoint.z*cos(theta) - vPoint.x*cos(theta));
}

vec3 rotateZ(vec3 vPoint, float theta){
	return vec3(vPoint.x*cos(theta) - vPoint.y*sin(theta), vPoint.x*sin(theta) + vPoint.y*cos(theta), vPoint.z);
}

const float EPSILON = 1e-10;

vec3 floatToRGB(float v, float scale) {
    float r = v;
    float g = mod(v*scale,1.0);
    r-= g/scale;
    float b = mod(v*scale*scale,1.0);
    g-=b/scale;
    return vec3(r,g,b);
}

vec3 rgb2hcv(in vec3 rgb)
{
    // RGB [0..1] to Hue-Chroma-Value [0..1]
    // Based on work by Sam Hocevar and Emil Persson
    vec4 p = (rgb.g < rgb.b) ? vec4(rgb.bg, -1., 2. / 3.) : vec4(rgb.gb, 0., -1. / 3.);
    vec4 q = (rgb.r < p.x) ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);
    float c = q.x - min(q.w, q.y);
    float h = abs((q.w - q.y) / (6. * c + EPSILON) + q.z);
    return vec3(h, c, q.x);
}

vec3 rgb2hsl( in vec3 rgb )
{
    // RGB [0..1] to Hue-Saturation-Lightness [0..1]
    vec3 hcv = rgb2hcv(rgb);
    float z = hcv.z - hcv.y * 0.5;
    float s = hcv.y / (1. - abs(z * 2. - 1.) + EPSILON);
    return vec3(hcv.x, s, z);
}

vec3 hsl2rgb( in vec3 c )
{
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );

    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));
}



/*
vec3 GetLightColor(int i){
	#if GAMMA_CORRECTION == 1
	return lightColor[i].rgb;
	#else
	return lightAmbient[i].rgb;
	#endif
}


int GetSunOrMoonLightIndex() {
	int nFarthestLight = -1;
	float fFarthestLight = 0.0;
	
	vec3 vLightOffset;
	float fLightOffset;
	
	for (int i = 0; i < MAX_NUM_LIGHTS; i++) 
	{		
		vLightOffset = lightPosition[i].xyz - vPosSky;				
		fLightOffset = length(vLightOffset);
			
		if (fLightOffset > fFarthestLight) 
		{
			if (GetLightColor(i) != vec3(0.0)) 
			{
				nFarthestLight = i;
				fFarthestLight = fLightOffset;		
			}
		}	
	}

	return nFarthestLight;
}
*/


float Lorentzian(float t, float h){
	return 1.0/(1.0+pow(t-h, 2.0));
}

float Lorentzian2(float t, float h){
	return pow(1.0/(1.0+pow(t-h, 2.0)), 2.0);
}

float GetRadiansBetween(vec3 v1, vec3 v2){
	return acos(dot(normalize(v1), normalize(v2)));
	

	//alternate ATAN method which is supposed to be better for very small angles
	/*
	float cx = v1.y * v2.z - v1.z * v2.y;
	float cy = (v1.z * v2.x - v1.x * v2.z);
	float cz = (v1.x * v2.y - v1.y * v2.x);
	float dot12 = dot(v1, v2);
	float det12 = sqrt(cx*cx + cy*cy + cz*cz);
	return atan(det12, dot12);
	*/
	
}



float GetAngleBetween(vec3 v1, vec3 v2){
	return degrees(GetRadiansBetween(v1, v2));
}

float GetRangeToHorizon(float fHorizonHour, float fTimer) {
	return pow(max(fHorizonHour-abs(12.0-fTimer), 0.0)/fHorizonHour,0.5);
}

float GetRangeToHorizon(float fHorizonHour) {
	return pow(max(fHorizonHour-abs(12.0-moduleTime), 0.0)/fHorizonHour,0.5);
}

vec3 ScreenBlend(vec3 v1, vec3 v2){
	return vec3(1.0)-(vec3(1.0)-v1)*(vec3(1.0)-v2);
}

float OverlayBlend(float f1, float f2){
	if (f1 < 0.5) {
		return 2.0 * f1 * f2;
	} else {
		return 1.0-(2.0*(1.0-f1)*(1.0-f2));
	}
}


float GetModuleTime() {
	//Try mixing transTimer and moduleHour data	

	//get the current transition timer
	float transTimer = moduleTimeIntoTransition / 60.0 / moduleMinutesPerHour;
	
	//technically this 60 should be replaced -----^
	//with moduleTransitionTime, which is the length of the transition
	
	//!!do not clamp transTimer as a way to fix jumps or you lose hourly data!!
	
	//calculate a sloppy time 
	float t0 = moduleHour + (transTimer - floor(transTimer));
		
	float t = 0.0;
	
	//The transTimer will begin at 0.0 no matter what the module start time is
	//So if the module start hour is not at a transition time
	//it cannot be used to track since the last actual transition
	
	//Try to anticipate when error will happen when using sloppy time
	/*
	float tE = transTimer - floor(transTimer);
	bool possibleError = false;
	if (tE > 0.5) {
		//SunColorDay = vec3(0.0,1.0,0.0);
		//SunColorHorizon = SunColorDay;
	} else {
		//SunColorDay = vec3(0.0,0.0,1.0);
		//SunColorHorizon = SunColorDay;
	}
	if (tE < 0.0001){
		possibleError = true;
		//t0 -= 1.0;
		//SunColorDay = vec3(1.0,0.0,1.0);
		//SunColorHorizon = SunColorDay;
	} else if (tE > 0.98585) { //not lower0.989
		t0 -= 1.0;
		possibleError = true;
		//SunColorDay = vec3(1.0,1.0,0.0);
		//SunColorHorizon = SunColorDay;
	}
	*/

	//The transTimer resets to zero at 6am, 7am, 6pm and 7pm
	//corresponding with dawnHour and duskHour +0 and +1
	//when trans times are 1 hour long
	//This allows for no-skip timing between those hour ranges after the first
	//daily transition is started
	
	//do the daytime portion
	if (moduleHour > moduleDawnHour && moduleHour < moduleDuskHour) {
		//proper non-skipping time between dawn+1 and dusk+0
		t = moduleDawnHour + transTimer + 1.0;
		
		
	//do the nighttime portion
	} else if (moduleHour > moduleDuskHour || moduleHour < moduleDawnHour) {
		//proper non-skipping time between dusk+1 and dawn+0
		t = moduleDuskHour + transTimer + 1.0;
		t = mod(t, 24.0);
		
	//do sloppy timer at transition hours
	} else {
		//Use sloppy time
		//Decent time at transition hours with minor skipping at hour boundaries
		//add the module integer hour to the fractional time from the transTimer
		t = t0;
	}	
	
	//When there is error t.hour can be substantially different from moduleHour
	//This will always happen if module start hour is not on a transition hour
	if (abs(floor(t) - moduleHour) > 1.0){
		t = t0;
	}		

	
	return t;
}



float FlexOrbit(float fTime){
	if (fTime > 12.0) {
		return  12.0 + (12.0 * pow(abs(12.0-fTime)/12.0, 1.5));
	} else {
		return  12.0 - (12.0 * pow(abs(12.0-fTime)/12.0, 1.03125));	
	}
}





float GetHorizonMod(float fTime){
	//add 12 hours to the time
	fTime = fTime +12.0;

	//create two tight gaussian curves at 6 and 18
	float fMixValue = fTime * PI/6.0;
	fMixValue = -cos(fMixValue)/2.0;
	fMixValue += 0.5;
	fMixValue = pow(fMixValue, 100);
	return fMixValue;

	//return pow(0.5+(-cos((fTime * PI)/6.0)/2.0),100.0);
}


vec3 xyz2rtp(vec3 vCart){
	float r = length(vCart.xyz);
	float theta = atan(length(vCart.xy)/vCart.z);
	float phi;
	
	if (vCart.x > 0.0) {
		phi = atan(vCart.y/vCart.x);
	} else if (vCart.x < 0.0 && vCart.y >= 0.0){
		phi = atan(vCart.y/vCart.x) + PI;
	} else if (vCart.x < 0.0 && vCart.y < 0.0) {
		phi = atan(vCart.y/vCart.x) - PI;
	} else if (vCart.x == 0.0 && vCart.y > 0.0) {
		phi = PI/2.0;
	} else if (vCart.x == 0.0 && vCart.y < 0.0) {
		phi = -PI/2.0;
	} else {
		phi = 0.0;
	}
	
	return vec3(r, degrees(theta), degrees(phi));
}


vec2 GetUVFromPos(vec3 vSky, vec3 vObj){
	//vSky comes in as player relative coordinates
	//vObj comes in as basic unit coordinates
	//if we assume that everything on the skybox needs to be
	//player-relative, this should work fine
	
	//define a plane tangent to the skydome at vObj
	vec3 n1 = normalize(cross(vObj, vec3(0,0,1))); //was 010
	vec3 n2 = normalize(cross(vObj, n1));
	
	//project vSky on the plane
	float x = dot(vSky, n1);
	float y = dot(vSky, n2);
	
	//convert xy to uv
	vec2 uv = vec2(x,y);
	return uv;
}

void BuildSun(){
	//don't try drawing the sun between certain hours
	if ((moduleTime < 3.0) || (moduleTime > 22.0)) {
		return;
	}
		
	//get the angle between the sun center and the sky fragment
	fSunFragAngle = GetRadiansBetween(vPosSky, vPosSun);
	
	//make the sun bigger at dawn and dusk
	//fSunFragAngle /= fSunSizeMod;
		
	//build a sun from texture
	//convert sky position to uv position 
	if (fSunFragAngle < radians(SunRadius)){
		//get base UV		
		vec2 vSunUV = GetUVFromPos(normalize(vPosSky), normalize(vPosSun));		
		vSunUV *= 90.0/(SunRadius*PI);
		
		//scale the base coordinates to match the larger sun
		vSunUV /= fSunSizeMod;
		
		//sun should be upper left corner of texture
		vSunUV *= vec2(0.5,-0.5);
		vSunUV += vec2(0.25,-0.25);		
		
		//get the sun color and luminance from texture
		vSunFragColor = texture2D(texUnit0, vSunUV.xy);
		fSunLum = ColorToLuma(vSunFragColor.rgb);
	}	
}



void BuildMoon(){
	//don't try drawing the moon between certain hours
	if ((moduleTime >= 8.0) && (moduleTime <= 16.0)) {
		return;
	}
				
	//get the angle between the moon center and the sky fragment
	fMoonFragAngle = GetRadiansBetween(vPosSky, vPosMoon);
	
	//make the glow bigger by time of day
	//fMoonFragAngle /= fMoonSizeMod;
	
	//build a moon from texture
	//convert sky position to uv position 
	vec2 vMoonBaseUV;
	if (fMoonFragAngle < radians(MoonRadius)){
		//get base UV		
		vec2 vMoonUV = GetUVFromPos(normalize(vPosSky), normalize(vPosMoon));
		vMoonUV *= 90.0/(PI*MoonRadius);
		
		//scale the base coordinates to match the larger moon
		vMoonUV /= fMoonSizeMod;
		vMoonBaseUV = vec2(vMoonUV.xy);
		
		//the moon should be the upper right quarter of the texture				
		vMoonUV *= vec2(0.5,-0.5);
		vMoonUV += vec2(0.75,-0.25);		
		
		//get the moon fragment color and luminance from texture	
		vMoonFragColor = texture2D(texUnit0, vMoonUV.xy);
		fMoonLum = ColorToLuma(vMoonFragColor.rgb);

		//make the moon less bright in daytime
		//but don't go dark
		//fMoonLum *= max(1.0-timeToHemisphere,0.5);		
		
		//make the moon dimmer if near the sun
		float fMoonSunAngleMod = pow(GetAngleBetween(vPosSun, vPosMoon)/45.0, 0.5);
		fMoonLum *= fMoonSunAngleMod;
	
	}	
	
	//do moon crescent shape
	
	if (RENDER_MOON_PHASES == 1 && fMoonLum > 0.0) {	
		//get the base uv we stored earlier
		vec2 uv = (2.5*vMoonBaseUV);
		
		//project the coordinates around a cylinder fit to the moon sprite size
		vec3 vCyl = vec3(uv.x,uv.y, sqrt(-(uv.x*uv.x+uv.y*uv.y-0.24)));

		//get the orbit time for the little sun around this cylinder
		fMoonPhase = (1.0-(moduleDay/28.0)) * 2.0 * PI;
		vec3 vTinySun = vec3(sin(fMoonPhase)*1000.0, 0.0, cos(fMoonPhase)*1000.0)/100.0;
		
		//calculate how much shade would be cast on the cylinder
		float fShade = dot(vCyl, normalize(vTinySun-vCyl));
		
		//don't let the shade go to or below zero
		//fShade = clamp(fShade, 0.01, 1.0);
	   
		//modify the moon color to match the fShade
		vMoonFragColor.rgb *= clamp(2.35*fShade, 0.01, 1.0);
		
		//temp
		//if (fMoonPhase > PI/2.0) vMoonFragColor.r = 1.0;
	}
	
}


void BuildSky(){
	
	/*
	//base sky color is the fog color
	//let fog color be set by the module
	//vSkyColor = fogColor.rgb;
	*/
	
	//get sky gradient color from texture6	
	//float fSkyZ = pow(min(max(abs(normalize(vPosSky.xyz).z), 0.01), 0.99),(1.0/3.0));
	float fSkyZ = abs(normalize(vPosSky.xyz).z);
	fSkyZ = (fSkyZ * 4.0);
	fSkyZ = min(max(fSkyZ, 0.01), 0.99);
	
	vec2 vSkyTexCoords = vec2(moduleTime/24.0, fSkyZ);
	vSkyColor = texture2D(texUnit6, vSkyTexCoords).rgb;
		
	//don't try drawing the sun between certain hours
	float fSunMix=0.0;
	float fMoonMix=0.0;

	float fSunPinch = abs(moduleTime-12.0);

	//skyline gain sun/moon diffuse color
	float fHorizonMix = GetAngleBetween(vec3(0.0,0.0,1.0), vPosSky.xyz);
	fHorizonMix = min(fHorizonMix, 90.0);
	fHorizonMix /= 90.0;
	fHorizonMix = pow(fHorizonMix, 10.0);
	fHorizonMix = max(fHorizonMix, 0.0);

	float fSunSpread = 90.0;
	fSunSpread *= SunIntensity;

	//calculate sun properties
	if ((moduleTime >= 3.0) && (moduleTime <= 22.0)) {
		//sun region gains sun diffuse color 		
		fSunMix = GetAngleBetween(vPosSun, vPosSky.xyz);
		fSunMix = min(fSunMix, fSunSpread);
		fSunMix /= fSunSpread;
		fSunMix = 1.0 - fSunMix;
		fSunMix = pow(fSunMix, pow(1.3, fSunPinch));
		fSunMix *= SunIntensity;
		fSunMix = clamp(fSunMix,0.0,1.0);
		//fSunMix *= 1.25;
		
		//calculate sun horizon modifier
		float fSunHorizonMix = GetAngleBetween(vec3(0.0,0.0,1.0), vPosSun.xyz);
		fSunHorizonMix /= 90.0;
		
		//check for below horizon
		if (fSunHorizonMix > 1.0) {
			fSunHorizonMix = 1.0-10.0*(fSunHorizonMix-1.0);
			fSunHorizonMix = max(fSunHorizonMix, 0.0);
			fSunMix *= fSunHorizonMix;
		}
		
		//add sun to sky
		vSkyColor = mix(vSkyColor.rgb, vSunColor.rgb, fSunMix); 		

		//add sun to horizon
		//vSkyColor = mix(vSkyColor.rgb, vSunColor.rgb, fHorizonMix*fSunHorizonMix); 
	}

	
	//calculate moon properties
	if ((moduleTime < 8.0) || (moduleTime > 16.0)) {
		//moon region gains moon diffuse color 
		fMoonMix = GetAngleBetween(vPosMoon, vPosSky.xyz);
		fMoonMix *= abs(moduleTime-12.0)/12.0;
		fMoonMix = min(fMoonMix, 90.0);
		fMoonMix /= 90.0;
		fMoonMix = 1.0 - fMoonMix;
		fMoonMix = pow(fMoonMix, pow(1.35, fSunPinch));
		fMoonMix = max(fMoonMix, 0.0);
		fMoonMix *= 0.5*(1.0-fSunMix);
		//fMoonMix *= 3.0;
		
		//pinch out moon glow for moon phase
		float fPhaseGlow = 2.0*pow((2.0*(-abs((moduleDay/28.0)-0.5)+0.5)),0.5);
		fMoonMix *= fPhaseGlow;
		
		//vSkyColor += 0.5*mix(vSkyColor.rgb, vMoonColor.rgb, fMoonMix+0.5*(1.0-fSunHorizonMix));
		vSkyColor += vMoonColor.rgb * fMoonMix; 
		//vSkyColor = mix(vSkyColor.rgb, vMoonColor.rgb, fHorizonMix); 
}


	FragmentColor.rgb = vSkyColor;  
	fSkyLum = ColorToLuma(FragmentColor.rgb);
	
}


void BuildClouds() {
	//convert skybox world coords to infinite flat sky
	vec2 p = 20.0*vPosSky.xy/(vPosSky.z+100.0);

    //adjust flow angle for cloudstream
    float fFlowAngle = 25.0;
	p = rotateUV(p, vec2(0.5,0.5), fFlowAngle);	
	vec2 uv = vec2(p);    	
	
    float time = tick * CloudSpeed;
    float q = fbm(uv * CloudScale * 0.5);

	//Construct first cloud layer (course gray)
	
    //ridged noise shape
	float r = 0.0;
	uv *= CloudScale;
    uv -= q - time;
    float weight = 0.8;
    for (int i=0; i<CloudPasses; i++){
		r += abs(weight*noise( uv ));
        uv = m*uv + time;
		weight *= 0.7;
    }
    	
    //noise shape
	float f = 0.0;
    uv = vec2(p);   
	uv *= CloudScale;
    uv -= q - time;
    weight = 0.7;
    for (int i=0; i<CloudPasses; i++){
		f += weight*noise( uv );
        uv = m*uv + time;
		weight *= 0.6;
    }
	
    
    f *= r + f;
    
	//Construct second cloud layer (fine white)

    //noise colour
    float c = 0.0;
    
	if (USE_TWO_LAYER_CLOUDS == 1) {
		time = tick * CloudSpeed * 2.0;
		uv = vec2(p);
		uv *= CloudScale*2.0;
		uv -= q - time;
		weight = 0.4;
		for (int i=0; i<CloudPasses-1; i++){
			c += weight*noise( uv );
			uv = m*uv + time;
			weight *= 0.6;
		}
		
		//noise ridge colour
		float c1 = 0.0;
		time = tick * CloudSpeed * 3.0;
		uv = vec2(p);
		uv *= CloudScale*3.0;
		uv -= q - time;
		weight = 0.4;
		for (int i=0; i<CloudPasses-1; i++){
			c1 += abs(weight*noise( uv ));
			uv = m*uv + time;
			weight *= 0.6;
		}
		c += c1;
	}
	
		
	vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp(((CloudBaseLum*fCloudWeatherLum) + CloudLightenRate*c), 0.0, 1.0);
   
    f = (CloudCover*fCloudWeatherCover) + CloudAlpha*f*r*fCloudWeatherAlpha;
    
	//get previous sky color
	float fPreviousLum = ColorToLuma(FragmentColor);
	
	//mix a cloud and sky color
	float fSkyMix = clamp(f + c, 0.0, 1.0);
    vCloudColor = clamp(fCloudWeatherTint * CloudSkyTint * vSkyColor + cloudcolour , 0.0, 1.0) * fSkyMix;
		
	//remember cloud luminance
	fCloudLum = clamp(ColorToLuma(vCloudColor), 0.0, 1.0);	


	//special omission when clouded
	if (fCloudLum > 0.0) {				
		//prevent sun/moon/stars from drawing through clouds
		float fCloudBlock = 1.0-clamp(fSkyMix, 0.0,1.0);
		fMoonLum *= fCloudBlock;
		fSunLum *= fCloudBlock;		
		fStarLum *= fCloudBlock;
										
		
		//make clouds glow around edges and darken in the centers
		float fDensityToLumDir = (0.5-fSkyMix); //controls which density is opague
		float fDensityLumStrength = min(fTotalGlow, fSkyMix); //controls rate of glow by density
		fCloudLum += 3.0 * fDensityToLumDir * fDensityLumStrength * clamp(fSkyMix, 0.0,1.0);
		
		//when clouds shine around edges and glow is near, add more glow
		if (fDensityToLumDir > -0.1) {
			fCloudLum += 2.0*(fTotalGlow)*(1.0-fCloudBlock);
		}
		
		//darken clouds in general when sun glow is high
		fCloudLum -= pow(fSunGlow, 2.0);		
			
		//when clouds are dense and sun is opposite
		//add glow on clouds from sun
		if (fCloudLum > 0.0) {
			fCloudLum += fSunCloudGlow * fCloudLum;
			vCloudColor = mix(vCloudColor, vSunColor, fSunCloudGlow);
		}

		//darken clouds by time, but not to zero
		float fTimeOmit = clamp(timeToHemisphere, 0.2,1.0);
		fCloudLum *= fTimeOmit;
		
		
		//finish cloud lum mods
		vCloudColor *= fCloudLum;

		
	}	
		
	//mix colors via screen blending function
	FragmentColor.rgb = ScreenBlend(FragmentColor.rgb, vCloudColor);	

}



void BuildGlowOnClouds(){
	//get the angle between sun position and cloud fragment position
	float fSunCloudAngle = GetRadiansBetween(vPosSky, vPosSun);
	float fSunCloudAngleMax = PI * 0.66;
	
	if (fSunCloudAngle < fSunCloudAngleMax) {	
		//get glow gradient
		//0 at sun, 1 at angle max
		fSunCloudGlow = fSunCloudAngle / fSunCloudAngleMax;
		
		//0 at sun, 2 at angle max
		fSunCloudGlow *= 2.0; 
		
		//anything over half way grades back to 0 quickly
		if (fSunCloudGlow > 1.0) {
			fSunCloudGlow = 2.0-fSunCloudGlow;
		}
				
		//strength and limit
		fSunCloudGlow = clamp(fSunCloudGlow, 0.0, 1.0);
		fSunCloudGlow *= fSunCloudGlow;
		fSunCloudGlow = clamp(fSunCloudGlow,0.0, 1.0);
	}
}


/*
void BuildSunGlow(){
	//prepare the sun glow radius
	//radius should be out to about 90 degrees from sun position
	//square attenuation
	fSunGlow = SunIntensity*(1.0-pow(2.0*abs(fSunFragAngle)/PI, 0.5));
	
	if (fSunGlow > 0.0) {
		fSunGlow = pow(fSunGlow, SunGlowPinch*fGlowWeatherPinch);

		//sun glow glow more at the horizon
		fSunGlow *= fSunSizeMod;		
		
		//hide stars with sunglow
		fStarLum -= clamp(min(2.0*fSunGlow, fStarLum), 0.0,1.0);

	} else {
		fSunGlow = 0.0;
	}
	
	//limit sun glow, so it doesn't make pinpoints through dense clouds
	fSunGlow = clamp(fSunGlow*fSunGlow, 0.0, 0.75);
	
	fTotalGlow += fSunGlow;
	fTotalGlow = clamp(fTotalGlow, 0.0, 1.0);
}
*/

/*
void BuildMoonGlow(){
	//prepare the moon glow radius
	//radius should be out to about 30 degrees from moon position
	//square attenuation
	fMoonGlow = (1.0-pow(2.0*abs(fMoonFragAngle)/PI, 0.5));
		
	if (fMoonGlow > 0.0) {
		fMoonGlow = pow(fMoonGlow, MoonGlowPinch*fGlowWeatherPinch);

		//moon should glow less at the horizon
		fMoonGlow /= fMoonSizeMod;		

		//moon should not glow in the daytime
		fMoonGlow *= 1.0 - timeToHemisphere;		

	} else {
		fMoonGlow = 0.0;
	}
	
	//limit moon glow so it doesn't overglow clouds
	fMoonGlow = clamp(fMoonGlow, 0.0, 0.5);

	//add double to total glow to help with night cloud opacity
	fTotalGlow += fMoonGlow;
	fTotalGlow = clamp(fTotalGlow, 0.0, 1.0);
}
*/





/*
void BuildClock() {	
	float fLineWidth = 0.5;
	
	//get the angle on XY plane 
	//where 0 is to the south, with positive numbers heading east
	float fAngleXY = 90.0 + degrees( atan(vPosSky.y/vPosSky.x) );
	
	//divide the XY plane into 15 degree sections
	float fModAngle = mod(fAngleXY, 15.0);
	if (fModAngle < (fLineWidth/2.0) || fModAngle > (15.0-(fLineWidth/2.0))) {
		//paint a vertical line at each section
		FragmentColor.rgb = vec3(0.5);
	}
	if ((fAngleXY < (fLineWidth/2.0) || fAngleXY > -(fLineWidth/2.0)) && vPosSky.y > 0.1) {
		//show where 0 is located in this system (using south as midnight)
		FragmentColor.r = 1.0;
	}
}


void BuildCompass() {	
	float fLineWidth = 0.5;

	//get the angle on XY plane 
	//where 0 is to the south, with positive numbers heading east
	float fAngleXY = -90.0 + degrees( atan(vPosSky.y/vPosSky.x) );
	
	//divide the XY plane into 15 degree sections
	float fModAngle = mod(fAngleXY, 90.0);
	if (fModAngle < (fLineWidth/2.0) || fModAngle > (90.0-(fLineWidth/2.0))) {
		//paint a vertical line at each section
		FragmentColor.rgb = vec3(0.5);
	}
	if (abs(fAngleXY-0.0)<(fLineWidth/2.0) && vPosSky.y > 0.1) {
		//show where north is located in this system
		FragmentColor.r = 1.0;
	}
}
*/


void SetupWeather(){

	float fWeatherDensity;
	int nWeatherType;
	
	if (WeatherTypeOverride != -1) {
		fWeatherDensity = WeatherDensityOverride;
		nWeatherType = WeatherTypeOverride;
	} else {
		fWeatherDensity = clamp(areaWeatherDensity/100.0, 0.0,1.0);
		nWeatherType = areaWeatherType;
	}
	
		
	
	if (nWeatherType == 0){
		//clear
		
	} else if (nWeatherType == 1){
		//rain and lightning
		//modify cloud cover based on weather density
		
		fCloudWeatherAlpha = 5.0 * fWeatherDensity;
		fCloudWeatherCover = 10.0 * fWeatherDensity;
		fCloudWeatherLum = 0.5 / fWeatherDensity;
		fCloudWeatherTint = 5.0 * fWeatherDensity;
		
		fSkyWeatherColor = 0.01 / fWeatherDensity;
		
		fGlowWeatherPinch = 2.0 * fWeatherDensity;		
		
	} else if (nWeatherType == 2){
		//snow
		
	}
	
}



void BuildStars() {
	//don't try drawing the stars between certain hours
	if ((moduleTime >= 6.0) && (moduleTime <= 19.0)) {
		return;
	}
	
	fStarLum = 1.0;
	
	//don't build stars where there is a sun or moon decal	
	float fBlockStars = fSunLum + fMoonLum;
	if (fBlockStars > 0.1) {
		fStarLum = 0.0;
		return;
	}	
	
	//don't build stars within so many degrees of the sun
	float fStarFade = GetAngleBetween(vPosSky, vPosSun);
	fStarFade = min(abs(fStarFade), 45.0)/45.0;
	//fStarFade = 1.0 - fStarFade;
	fStarFade = pow(fStarFade, 3.2);
	
	fStarLum *= fStarFade;
	

	//get some scaled coordinates
	vec2 vStarCoords = 100.0*(vPosSky.xy/(vPosSky.z+1000.0));

	//basic star field
    float fStars = dotField(vStarCoords, StarMaxSize, StarDensity);

	//Lower the brighness for low z
    fStars *= clamp(vPosWorldUV.z/50.0, 0.0, 1.0);
	
	//add star in grayscale
	fStarLum *= fStars;
	fStarLum = min(fStarLum, 1.0);
	fStarLum = max(fStarLum - fSkyLum, 0.0);
	
}



void FinishRender(){
	//print what parts remain after attenuation and cloud cover blocking
	
	//add stars
	FragmentColor.rgb += vec3(fStarLum);
	
	//add moon
	if (fMoonLum>0.0) {	
		if (RENDER_MOON_LATE == 1) {
			//FragmentColor.rgb -= 1.0-pow(1.0-(fMoonLum*vMoonFragColor.a), 2.0);
			FragmentColor.rgb = vMoonFragColor.rgb * fMoonLum * vMoonFragColor.a;
		} else {
			FragmentColor.rgb += vMoonFragColor.rgb * fMoonLum * vMoonFragColor.a;
		}
	}
	
	//add sun
	if (fSunLum>0.0) {	
		if (RENDER_SUN_LATE == 1) {
			//FragmentColor.rgb -= 1.0-pow(1.0-(fSunLum*vSunFragColor.a), 2.0);
			FragmentColor.rgb = vSunFragColor.rgb * fSunLum * vSunFragColor.a;
		} else {
			FragmentColor.rgb += vSunFragColor.rgb * fSunLum * vSunFragColor.a;
		}
	}
	

}


void main (){	
	//return;
    FragmentColor = vec4(0.0, 0.0, 0.0, 1.0);
	
    SetupStandardShaderInputs();
    ApplyStandardShader();
	
	//convert sky particle position to player-relative position
	vPosSky = (vPosWorldUV.xyz - playerPosition.xyz);	
	
	//limit lowest portion on a larger skybox if not half-sphere
	if (vPosSky.z >= SkyLowestRender) {
	    
		//get time from module
		moduleTime = scriptableFloat1;
		timeToHemisphere = GetRangeToHorizon(8.0);

		//SetupWeather();
		
		//get sun position from module
		vPosSun = scriptableVec1.xyz;
		vSunColor = scriptableVec3.xyz;

		BuildSun();

		//get moon position from module
		vPosMoon = scriptableVec2.xyz;
		vMoonColor = scriptableVec4.xyz;

		BuildMoon();
				
		if (RENDER_STARS == 1) BuildStars();

		
		/*
		if (RENDER_GLOW == 1) {
			BuildSunGlow();
			BuildMoonGlow();
		}
		*/
		

		if (RENDER_CLOUDS == 1) {
			//BuildGlowOnClouds();
			//BuildClouds();
		}		
		
		BuildSky();
		
		
		FinishRender();
		
		//BuildClock();
		//BuildCompass();	
	}
	
    gl_FragColor = FragmentColor;
	
	//set frag to max distance
	//gl_FragDepth = 1.0;
	
	
}
