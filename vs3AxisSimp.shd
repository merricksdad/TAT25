//=============================================================================
//
// vs3AxisSimp.shd
//
//=============================================================================

#define SHADER_TYPE 1

#define FOG 1
#define KEYHOLING 1

#define NORMAL_MAP 1
#define ENVIRONMENT_MAP 0
#define LIGHTING 1
//height map support is removed
#define HEIGHT_MAP 0

#define POSITION_WORLD 1
#define CALC_SUN_MOON 1

#ifndef USE_LOCAL_NORMAL
	#define USE_LOCAL_NORMAL 0
#endif

#define PI 3.14159265359

//parameters from material
uniform float TopBias;


#include "inc_standard_md"

varying float fDistFragToCamera;
varying float fDistFragToPlayer;

varying vec3 vMixing;

//like normalization, except linear not spherical. 
//All values must add to one. A + B + C = 1.0
vec3 ToUnity(vec3 vValue)
{
	//prevent divide by zero
	return vValue/max(abs(vValue.x) + abs(vValue.y) + abs(vValue.z), 0.0001);
}

//applies the power function but retains the original sign, which allows proper float powers to be applied
float spow (float fValue, float fPower)
{
	return sign(fValue) * pow(abs(fValue), fPower);
}

//applies the power function but retains the original sign, which allows proper float powers to be applied
vec3 spow (vec3 vValue, float fPower)
{
	return vec3(
		sign(vValue.x) * pow(abs(vValue.x), fPower),
		sign(vValue.y) * pow(abs(vValue.y), fPower),
		sign(vValue.z) * pow(abs(vValue.z), fPower)
	);
}



void main ()
{
    ApplyStandardShader();
	

//==============================
//	     SHARED/PREFAB
//==============================	
	
	//save time, do stuff now rather than in fragment shader
	fDistFragToCamera = distance(vPosWorld.xyz, cameraPosition.xyz);
	fDistFragToPlayer = distance(vPosWorld.xyz, playerPosition.xyz);
	
	
//==============================
//	    SETUP TEXTURES
//==============================
	
	
	//replace texture coordinate system if needed
	vec3 vOrigNormal;
	#if USE_LOCAL_NORMAL == 1
		vOrigNormal = normalize(vLocalNormal);
		vOrigNormal.xy *= -1.0;
	#else
		vOrigNormal = normalize(mat3(m_view_inv) * vVertexNormal);
	#endif 
	
	//identify mixing factors by orientation. Start with original normal
	vMixing = vOrigNormal;	
	
	//add top bias from parameter
	if (TopBias != 0.0) {
		float fFactor1 = (1.0 + TopBias*0.7071); //0.5 becomes x1.5
		float fFactor2 = (1.0 - TopBias*0.7071); //0.5 becomes x0.5	
		vMixing.z *= fFactor1;
		vMixing.xy *= fFactor2;
		vMixing = normalize(vMixing);
	}
		
	//factor in mixing power from material	
	float fDisplacementMixingFactor = 2.0*PI;
	vMixing.x = spow(vMixing.x,fDisplacementMixingFactor);
	vMixing.y = spow(vMixing.y,fDisplacementMixingFactor);
	vMixing.z = spow(vMixing.z,fDisplacementMixingFactor);	
	
	//due to initial orientation, xy plane is backward.
	vMixing.xy *= -1;
								
	//all three orientations must equal one unit or mixing can go too far
	vMixing = ToUnity(vMixing);
	
	//the values range from +1 to -1
	//where up, front, and left refer to up, south, and west respectively
	//and negative values point to down, north, and east
	
	
}
