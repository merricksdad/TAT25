//=============================================================================
//
// fsFoliage.shd
// based on fslit_nm.shd
//

/*
	This foliage shader removes white lines due to fresnel glare around textures,
	allows backfaces to be lit at light rates that differ from the front face, 
	and rewrites decal-style punchthrough blending.
	
	Additional options include 
*/
//=============================================================================

#define SHADER_TYPE 2

#define FOG 1
#define KEYHOLING 0
#define LIGHTING 1

#define NORMAL_MAP 1
#define SPECULAR_MAP 1
#define ROUGHNESS_MAP 1
#define HEIGHT_MAP 0
#define SELF_ILLUMINATION_MAP 1
#define ENVIRONMENT_MAP 0

#define POSITION_WORLD 1
#define FORCE_ALLOW_DISCARD 1
#define LIGHT_FORCE_INDIRECTIONAL 1

#define FOLIAGE_SHADER 1

#include "inc_standard_md"

varying float fDistFragToCamera;
varying float fDistFragToPlayer;

#include "inc_md_2024"

uniform float FoliageMaxDrawDist;
uniform mat4 m_mvp;



void main ()
{
	//get distance
	//float fDistToCamera = distance(vPosWorld.xyz, cameraPosition.xyz);	

	//do not draw foliage beyond a certain distance 
	/*if (FoliageMaxDrawDist != 0.0) {
		if (fDistFragToCamera > FoliageMaxDrawDist) discard;
	}*/

	//initialize
    FragmentColor = vec4(1.0);
 	SetupStandardShaderInputs();
	
	//do special discard for decals
	float fAlpha = texture2D(texUnit0, vTexCoords.xy).a;	
	
	//if (fAlpha < 0.75) {
		//fAlpha /= (0.75*(fDistFragToCamera/100.0)); 
		//fAlpha = min(fAlpha, 1.0);
		//if (fAlpha < 0.75) discard;
	//}
	if (fAlpha < 0.20) discard;
	fAlpha = 1.0;
	
	FragmentColor.a = fAlpha;

	//run special foliage shader with back side lighting
	//allows a percent of light to get through
	//ApplyFoliageShader();
	ApplySpecialShader();
		
	//finish up
    gl_FragColor = FragmentColor;
}
