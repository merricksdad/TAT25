uniform mat4 m_m;

//allow mesh painted with this texture to jiggle in the wind
uniform float FoliageWindAmplitudeMult;
uniform float FoliageWindWavelengthMult;
uniform float FoliageWindMax;
uniform float FoliageWindNoiseScale;

uniform int FoliageWindScaleByVCoord;
uniform float FoliageWindScaleVCoordPower;

uniform int FoliageSpriteRows;

void TransformFoliageCoordinates()
{
	vec4 vLocalPosition = vec4(0.0, 0.0, 0.0, 0.0);
	
	#if NO_TEXTURE != 1

		#if NORMAL_MAP == 1
			fTextureHandedness = fHandedness;
		#endif
		

		#if NO_TEXTURE_COORDS != 1
			vVertexTexCoords = mat2(m_texture) * vTcIn.xy;
		#else
			vVertexTexCoords = vec2(0.5, 0.5);
		#endif

	#endif	

	#if NORMAL_MAP == 1
		vVertexTangent = vec3(0.0, 0.0, 0.0);
	#endif
	#if VERTEX_NORMAL == 1
		vVertexNormal = vec3(0.0, 0.0, 0.0);
	#endif
	
	vLocalPosition = vPos;
	
	//NEW Shake Shader	
	//modify the local position using wind inputs as noise sources
	
	//defaults
	int nRows = max(FoliageSpriteRows, 1);
	//if (nRows == 0) nRows = 1;
	
	float fNoiseScale = FoliageWindNoiseScale;
	if (fNoiseScale == 0.0) fNoiseScale = 1.0;
	
	//get temporary world position
	vec3 vTempPos = (m_m * vLocalPosition).xyz;
	
	//set base wind to global wind
	float windStrength = abs(length(areaGlobalWind));

	//mod wind amplitude from parameters
	windStrength *= FoliageWindAmplitudeMult;
	
	//limit wind strength from parameters
	windStrength = min(windStrength, FoliageWindMax);
	
	//add in additional wind sources
	/*
	//apparently vertex shader does not get wind pointsource data
	for (int i = 0; i < windPointSourcesCount; i++)	{
		float windRad = windPointSourcesRadius[i];
		float windDist = abs(length(windPointSourcesPosition[i] - vTempPos));
		//if (windDist < windRad) {
			//determine how much wind time remains
			//float windTimeLeft = windPointSourcesTimeRemaining[i]/windPointSourcesDuration[i];
			//if (windTimeLeft > 0.01) {
				//get base intensity
				float windIntensity = 1.0;//windPointSourcesIntensity[i];
				
				//correct for zero distance
				//if (windDist <= 0.01) windDist = 0.01;
				
				//pinch out wind by square of distance
				//windIntensity *= 1.0/pow(windDist/windRad, 2.0);
				
				//peak the wind intensity in the front of its duration
				//pinch out as duration wanes
				//windIntensity *= pow(windTimeLeft, 2.0);
				
				//add to total wind on this vertex
				windStrength += 100.0 * windIntensity;
			//}
		//}		
	}
	
	windStrength += windPointSourcesCount;
	*/
	
	//wavelength changes by strength (confine to: max 2, min 0.1)
	float windWavelength = max(min(2.0, windStrength), 0.1);
	
	//mod wind wavelength from parameters
	windWavelength /= FoliageWindWavelengthMult;
		
	//calculate wind shake	
	if (windStrength != 0.0) {
		float fFinalWaveLength = windWavelength;
		float fTick = worldtimerTimeOfDay/20000.0;
		fTick *= fFinalWaveLength;
		float fNoise1 = sin(fNoiseScale * vTempPos.z * 3.1 * fTick);
		float fNoise2 = sin((vTempPos.x+vTempPos.z) * 1.3 * fTick);
		float fNoise3 = sin((vTempPos.y+vTempPos.z) * 0.7 * fTick);
		
		float windAmplitude = 0.005 * (fNoise1 + fNoise2 + fNoise3);

		windStrength *= windAmplitude;
	}
	
	
	//when wind is strong, favor the direction of the wind
	float windMagnitude = abs(length(areaGlobalWind));
	float windFavor = min(windMagnitude, FoliageWindMax)/FoliageWindMax;
	vec3 windDir = (FoliageWindMax/windMagnitude) * areaGlobalWind;
	
	
	
	//apply wind strength
	if (windStrength != 0.0) {

		//modify wind strength by V coordinate
		float fWindPinch = 1.0;
		if (FoliageWindScaleByVCoord == 1) {	
			//fWindPinch = vVertexTexCoords.y - floor(vVertexTexCoords.y);
			fWindPinch = vVertexTexCoords.y;
			fWindPinch = (fWindPinch*nRows)-floor(fWindPinch*nRows);
			
			//check for multi-row sprite map
			/*if (nRows > 1) {
				//recalculate to y position of sprite, rather than whole texture 
				fWindPinch *= nRows;
				fWindPinch -= floor(fWindPinch);
			}*/
			
			fWindPinch = 1.0-fWindPinch;
			fWindPinch = pow(fWindPinch,FoliageWindScaleVCoordPower);
			fWindPinch = 1.0-fWindPinch;
			
			windStrength *= fWindPinch;			
			windDir *= fWindPinch*fWindPinch;
			
		}
		
		windStrength *= FoliageWindAmplitudeMult;
		//windDir *= FoliageWindAmplitudeMult;
		
		//apply favored wind direction
		windFavor *= windFavor * windFavor * 0.25; //not too much
		vec3 vTotalWind = ((1.0-windFavor) * windStrength * areaGlobalWind) + (windFavor * windDir);
		
		
		//cap wind strength
		if (abs(vTotalWind.x) > FoliageWindMax) vTotalWind.x = sign(vTotalWind.x) * FoliageWindMax;
		if (abs(vTotalWind.y) > FoliageWindMax) vTotalWind.y = sign(vTotalWind.y) * FoliageWindMax;
		if (abs(vTotalWind.z) > FoliageWindMax) vTotalWind.z = sign(vTotalWind.z) * FoliageWindMax;
		
		//force some of the XY into downward Z
		vTotalWind.z -= abs(0.5*length(vTotalWind.xy));
		
		
		vLocalPosition.xyz += vTotalWind;
	}
	
	
	
	//END Shake Shader	
	
	
	#if VERTEX_NORMAL == 1
		vVertexNormal = vNormal;
	#endif
	#if NORMAL_MAP == 1
		vVertexTangent = vTangent;
	#endif
	
	#if NORMAL_FROM_LOCAL_POSITION == 1
		vVertexNormal.xyz = normalize(vLocalPosition.xyz);
	#endif
	
	vec4 vPosProj;

	#if POSITION_VIEW == 1
		vPosView = (m_mv * vLocalPosition).xyz;

		vPosProj = m_proj * vec4(vPosView.x, vPosView.y, vPosView.z, 1.0);

		#if NORMAL_MAP == 1
			// Rotate the tangent around the normal.
			// Gram-Schmidt orthogonalization.
			//vVertexTangent = vVertexTangent - vVertexNormal * fHandedness * (dot(vVertexTangent, vVertexNormal));
			// The two fits nicely as:
			//vVertexTangent = vVertexTangent * m_texture[0][0] - m_texture[0][0] * dot(vVertexNormal, vVertexTangent) * vVertexNormal + m_texture[1][0] * cross(vVertexNormal, vVertexTangent);
			vVertexTangent = mat3(m_mv) * vVertexTangent;
		#endif

		#if VERTEX_NORMAL == 1
			vVertexNormal = mat3(m_mv) * vVertexNormal;
			//if(vVertexNormal.z < 0.0) vVertexNormal = -vVertexNormal;
		#endif
	
	#else 
	
		vPosProj = m_mvp * vLocalPosition;
	#endif
	
	gl_Position = vPosProj;
	
	#if POSITION_WORLD == 1
		vPosWorld = (m_vp_inv * vPosProj).xyz;
	#endif 
	




}

void ApplyFoliageShakeShader()
{
	TransformFoliageCoordinates();

	#if KEYHOLING == 1
	SetupKeyholeFactors();
	#endif 
	// Used for both specular light and environment map.
	#if ((ENVIRONMENT_MAP == 1 || SPECULAR_LIGHT == 1) && FRAGMENT_NORMAL != 1)
		SetupViewToSurfaceNormal();
	#endif

	#if LIGHTING == 1

		SetupLights();

		// Sets initial vertex color. For vertex lighting, this is done as part of the ComputeLighting call instead.
		#if FRAGMENT_LIGHTING == 1
			// Nothing for now.
		#elif FRAGMENT_NORMAL == 1

			if(staticLighting == 1)
			{
				VertexStaticLighting = ApplyColorSpace(vColor.rgb);
			}
			else
			{
				VertexStaticLighting = COLOR_BLACK.rgb;
			}	
			
		#else

			VertexColor = COLOR_WHITE;
			#if SPECULAR_LIGHT == 1
				SetupSpecularity(materialFrontDiffuse.rgb);
			#endif
			ComputeLightingEx(VertexColor, vVertexNormal);
			
		#endif

	#elif VERTEX_COLOR == 1
	
		VertexColor *= ApplyColorSpace(vColor);

	#endif

	#if (ENVIRONMENT_MAP == 1 || SPECULAR_LIGHT == 1) && FRAGMENT_NORMAL != 1
		if(envMapCube == 1)
		{
			vVertexTexCoordsEnvironmentCube = CalculateEnvironmentTexCoordsCube(vVertexNormal);
			vVertexTexCoordsEnvironment = vec2(0.0, 0.0);
		}
		else
		{
			vVertexTexCoordsEnvironment = CalculateEnvironmentTexCoords(vVertexNormal);
			vVertexTexCoordsEnvironmentCube = vec3(0.0, 0.0, 0.0);
		}
	#endif

	#if FOG == 1
		SetupFog();
	#endif
}